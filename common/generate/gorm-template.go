package generate

import "text/template"

var GormParseBasic = `
// Code generated by go-easy generate-mongodb DO NOT EDIT.
// go-easy url: https://github.com/siskinc/go-easy
package {{.package}}

import (
	easy_generate "github.com/siskinc/go-easy/common/generate"
	"github.com/jinzhu/gorm"
	"fmt"
)

func (t *{{.struct}}) Save() error {
	return {{.client}}.Save(t).Error
}
func (t *{{.struct}}) Delete() error {
	return {{.client}}.Delete(t).Error
}
type {{.query_builder_name}} struct {
	order []string
	where []struct{
		prefix string
		value interface{}
	}
	limit int
	offset int
}
func (qb *{{.query_builder_name}}) buildQuery() *gorm.DB {
	ret := {{.client}}
	for _, where := range qb.where {
		ret = ret.Where(where.prefix, where.value)
	}
	for _, order := range qb.order {
		ret = ret.Order(order)
	}
	ret = ret.Limit(qb.limit).Offset(qb.offset)
	return ret
}
func (qb *{{.query_builder_name}}) Count() (int, error) {
	var c int
	res := qb.buildQuery().Model(&{{.struct}}{}).Count(&c)
	if res.RecordNotFound() {
		c = 0
	}
	return c, res.Error
}
func (qb *{{.query_builder_name}}) First() (*{{.struct}}, error) {
	ret := &{{.struct}}{}
	res := qb.buildQuery().First(ret)
	if res.RecordNotFound() {
		ret = nil
	}
	return ret, res.Error
}
func (qb *{{.query_builder_name}}) QueryOne() (*{{.struct}}, error) {
	qb.limit = 1
	ret, err := qb.QueryAll()
	if len(ret) > 0 {
		return &ret[0], err
	}
	return nil, err
}
func (qb *{{.query_builder_name}}) QueryAll() ([]{{.struct}}, error) {
	ret := []{{.struct}}{}
	err := qb.buildQuery().Find(&ret).Error
	return ret, err
}
func (qb *{{.query_builder_name}}) Limit(limit int) *{{.query_builder_name}} {
	qb.limit = limit
	return qb
}
func (qb *{{.query_builder_name}}) Offset(offset int) *{{.query_builder_name}} {
	qb.offset = offset
	return qb
}

{{range .fields}}
func (qb *{{$.query_builder_name}}) Where{{call $.titelize .FieldName}}(p easy_generate.GormPredicate, value {{.FieldType}}) *{{$.query_builder_name}} {
	 qb.where = append(qb.where, struct {
		prefix string
		value interface{}
	}{
		fmt.Sprintf("%v %v ?", "{{.ColumnName}}", p),
		value,
	})
	return qb
}
func (qb *{{$.query_builder_name}}) OrderBy{{call $.titelize .FieldName}}(asc bool) *{{$queryBuilderName}} {
	order := "DESC"
	if asc {
		order = "ASC"
	}
	qb.order = append(qb.order, "{{.ColumnName}} " + order)
	return qb
}
{{end}}
}

`

// Make sure that the template compiles during package initialization
func parseTemplateOrPanic(t string) *template.Template {
	tpl, err := template.New("output_template").Parse(t)
	if err != nil {
		panic(err)
	}
	return tpl
}

var outputTemplate = parseTemplateOrPanic(GormParseBasic)
